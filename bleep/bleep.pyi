from typing import Any, Callable, List, Optional, Set, Tuple

class BleDescriptor:
    def uuid(self) -> str: ...

class BleCharacteristic:
    def uuid(self) -> str: ...
    def descriptors(self) -> Set[BleDescriptor]: ...

class BleService:
    def uuid(self) -> str: ...
    def characteristics(self) -> Set[BleCharacteristic]: ...

class BlePeripheralId:
    pass

class BlePeripheralProperties:
    def local_name(self) -> str: ...
    def services(self) -> List[str]: ...

class BlePeripheral:
    def id(self) -> BlePeripheralId: ...
    def address(self) -> str: ...
    async def properties(self) -> Optional[BlePeripheralProperties]: ...
    async def services(self) -> Set[BleService]: ...
    async def connect(self): ...
    async def disconnect(self): ...
    async def write(
        self, characteristic: BleCharacteristic, data: bytes, response: bool
    ): ...
    async def read(self, characteristic: BleCharacteristic) -> bytes: ...
    async def register_notification_callback(
        self, callback: Callable[[Tuple[str, bytes]], Any]
    ): ...
    async def subscribe(self, characteristic: BleCharacteristic): ...

class BleAdapter:
    async def adapter_info(self) -> str: ...
    async def start_scan(self): ...
    async def peripherals(self) -> List[BlePeripheral]: ...

class BleManager:
    async def adapters(self) -> List[BleAdapter]: ...
    @staticmethod
    async def new() -> BleManager: ...
